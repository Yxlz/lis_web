package com.cdxt.lisweb.controller.examine;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cdxt.lisweb.entity.examine.LisAiItemCheckReference;
import com.cdxt.lisweb.entity.examine.LisAiItemCheckReferenceTy;
import com.cdxt.lisweb.entity.examine.LisAiItemDevHist;
import com.cdxt.lisweb.entity.examine.LisItemDevCode;
import com.cdxt.lisweb.service.examine.LisAiItemCheckReferenceService;
import com.cdxt.lisweb.utils.IDCreateUtils;
import com.cdxt.lisweb.utils.UUIDGenerator;

/**
 * @author : liushijun
 * @date 创建时间：2018年7月3日 
 * @version 1.0
 * @company :成都信通网易科技发展有限公司
 * @description: //用于智能审核范围判断的展示 操作的一些功能方法
 */
@Controller
@RequestMapping("/reference")
public class LisAiItemCheckReferenceController {
	@Autowired
	LisAiItemCheckReferenceService lisAiItemCheckReferenceService;
	
	/**
	 * 为添加到分类的项目维护对应分类的规则
	 * @param data  前台模态框封装的对象
	 * @return
	 */
	@RequestMapping(value = "addReferenceInfo.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String addReferenceInfo(@RequestBody LisAiItemCheckReference data) {
		String id ="";
		//通过项目id 和类型id查询 是否是初次添加到类型的项目，如果是初次添加返回对应项目判断规则的id
		String judgeItemId = lisAiItemCheckReferenceService.findJudgeItem(data.getItemDevId(), data.getTypeId());
		//判断查询的判断id是有值，若有，则是初次添加规则，直接通过id获取这条规则，设置参数，并且设置初次设置规则的参数TYPE_MARK。
		//若无值，那么该项目是二次添加规则则新增一条规则。设置标记字段
		if(StringUtils.hasText(judgeItemId)){
			LisAiItemCheckReference lisAiItemCheckReference = lisAiItemCheckReferenceService.queryById(judgeItemId);
			lisAiItemCheckReference.setTypeMark("ADDED");
			if(StringUtils.hasText(data.getSpecialItem())){
				lisAiItemCheckReference.setSpecialItem(data.getSpecialItem());
			}
			if(StringUtils.hasText(data.getSampleName())){
				lisAiItemCheckReference.setSampleName(data.getSampleName());
			}
			if(StringUtils.hasText(data.getSex())){
				lisAiItemCheckReference.setSex(data.getSex());
			}
			if(StringUtils.hasText(data.getAgeL())){
				lisAiItemCheckReference.setAgeL(data.getAgeL());
			}
			if(StringUtils.hasText(data.getAgeH())){
				lisAiItemCheckReference.setAgeH(data.getAgeH());
			}
			if(StringUtils.hasText(data.getLimitReferenceL())){
				lisAiItemCheckReference.setLimitReferenceL(data.getLimitReferenceL());
			}
			if(StringUtils.hasText(data.getLimitReferenceH())){
				lisAiItemCheckReference.setLimitReferenceH(data.getLimitReferenceH());
			}
			if(StringUtils.hasText(data.getCheckL())){
				lisAiItemCheckReference.setCheckL(data.getCheckL());
			}
			if(StringUtils.hasText(data.getCheckH())){
				lisAiItemCheckReference.setCheckH(data.getCheckH());
			}
			if(StringUtils.hasText(data.getIsCv())){
				lisAiItemCheckReference.setIsCv(data.getIsCv());
			}
			if(StringUtils.hasText(data.getRangeIsOpen())){
				lisAiItemCheckReference.setRangeIsOpen(data.getRangeIsOpen());
			}
			if(StringUtils.hasText(data.getCvIsOpen())){
				lisAiItemCheckReference.setCvIsOpen(data.getCvIsOpen());
			}
			if(StringUtils.hasText(data.getAdoptIsOpen())){
				lisAiItemCheckReference.setAdoptIsOpen(data.getAdoptIsOpen());
			}
			if(StringUtils.hasText(data.getSitemIsOpen())){
				lisAiItemCheckReference.setSitemIsOpen(data.getSitemIsOpen());
			}
			lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
			return  "{success:true}";
		}else{
			id = IDCreateUtils.getRefID();
			data.setId(id);
			data.setTypeMark("ADDED");
			lisAiItemCheckReferenceService.save(data);
			return  "{success:true}";
		}
	}
	
	/**
	 * 通过项目id和类型id查询判断规则数据
	 * @return
	 */
	@RequestMapping(value = "getJudgeData.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public Map<String,Object> getJudgeData(int start, int limit,String itemId,String typeId) {
		Map<String, Object> objToMap = new HashMap<String, Object>();
		objToMap = lisAiItemCheckReferenceService.findJudgeAdded(start,limit,itemId,typeId);
		return objToMap;
	}
	/**
	 * 查询已经添加到类型的项目 用于加载已添加到类型项目表格
	 * @param start 前台传来的页码
	 * @param limit	前台传来的每页展示数目
	 * @return
	 */
	@RequestMapping(value = "getItemAdded.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public Map<String, Object> queryItemAddedByPage(int start, int limit,String groupId,String typeId) {
		Map<String, Object> addedItems = lisAiItemCheckReferenceService.findAddedItem(start,limit,groupId, typeId);
		return addedItems;
	}
	
	/**
	 * 用于为类型添加项目
	 * @param data
	 * @return
	 */
	@RequestMapping(value = "addItemToType.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String addItemToType(@RequestBody List<LisAiItemCheckReference> data) {
		String id = "";
			for (LisAiItemCheckReference lisAiItemCheckReference : data) {
				id = IDCreateUtils.getRefID();
				lisAiItemCheckReference.setId(id);
				lisAiItemCheckReferenceService.save(lisAiItemCheckReference);
			}
			return "{success:true}";
		}
	/**
	 * 用于改变该判断规则是否启用的按钮，犹豫一条数据对应类型的开启关闭只有一种。所以做如下判断
	 * @param 
	 * @param 
	 * @throws IOException
	 */
	@RequestMapping(value = "exchangeJudgeIsOpen.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String exchangeJudgeIsOpen(String id) {
		LisAiItemCheckReference lisAiItemCheckReference = lisAiItemCheckReferenceService.queryById(id);
		if(StringUtils.hasText(lisAiItemCheckReference.getSitemIsOpen())){
			if(lisAiItemCheckReference.getSitemIsOpen().equals("0")){
				lisAiItemCheckReference.setSitemIsOpen("1");
			}else if(lisAiItemCheckReference.getSitemIsOpen().equals("1")){
				lisAiItemCheckReference.setSitemIsOpen("0");
			}else{
				return "{success:false}";
			}
			lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
			return "{success:true}";
		}
		if(StringUtils.hasText(lisAiItemCheckReference.getRangeIsOpen())){
			if(lisAiItemCheckReference.getRangeIsOpen().equals("0")){
				lisAiItemCheckReference.setRangeIsOpen("1");
			}else if(lisAiItemCheckReference.getRangeIsOpen().equals("1")){
				lisAiItemCheckReference.setRangeIsOpen("0");
			}else{
				return "{success:false}";
			}
			lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
			return "{success:true}";
		}
		if(StringUtils.hasText(lisAiItemCheckReference.getCvIsOpen())){
			if(lisAiItemCheckReference.getCvIsOpen().equals("0")){
				lisAiItemCheckReference.setCvIsOpen("1");
			}else if(lisAiItemCheckReference.getCvIsOpen().equals("1")){
				lisAiItemCheckReference.setCvIsOpen("0");
			}else{
				return "{success:false}";
			}
			lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
			return "{success:true}";
		}
		if(StringUtils.hasText(lisAiItemCheckReference.getAdoptIsOpen())){
			if(lisAiItemCheckReference.getAdoptIsOpen().equals("0")){
				lisAiItemCheckReference.setAdoptIsOpen("1");
			}else if(lisAiItemCheckReference.getAdoptIsOpen().equals("1")){
				lisAiItemCheckReference.setAdoptIsOpen("0");
			}else{
				return "{success:false}";
			}
			lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
			return "{success:true}";
		}
		return "{success:false}";
	}
	
	/**
	 * 用于删除当前类型已添加的项目
	 */
	@RequestMapping(value = "deleteAddedItem.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String deleteAddedItem(String typeId,String itemId) {
		//通过项目id 和类型id 查询出对象
		List<LisAiItemCheckReference> list = lisAiItemCheckReferenceService.findScopeJudgeItemObj(typeId, itemId);
		//删除当前对象
		lisAiItemCheckReferenceService.deleteAll(list);
		
		return "{success:true}";
	}
	
	/**
	 * 修改判断规则
	 * @param data  前台模态框封装的对象
	 * @return
	 */
	@RequestMapping(value = "editCheckReferenceInfo.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String editCheckReferenceInfo(@RequestBody LisAiItemCheckReference data) {
		LisAiItemCheckReference lisAiItemCheckReference = lisAiItemCheckReferenceService.queryById(data.getId());
		if(StringUtils.hasText(data.getAdoptIsOpen())){
			lisAiItemCheckReference.setAdoptIsOpen(data.getAdoptIsOpen());
		}
		if(StringUtils.hasText(data.getAgeH())){
			lisAiItemCheckReference.setAgeH(data.getAgeH());
		}
		if(StringUtils.hasText(data.getAgeL())){
			lisAiItemCheckReference.setAgeL(data.getAgeL());
		}
		if(StringUtils.hasText(data.getCheckH())){
			lisAiItemCheckReference.setCheckH(data.getCheckH());
		}
		if(StringUtils.hasText(data.getCheckL())){
			lisAiItemCheckReference.setCheckL(data.getCheckL());
		}
		if(StringUtils.hasText(data.getCvIsOpen())){
			lisAiItemCheckReference.setCvIsOpen(data.getCvIsOpen());
		}
		if(StringUtils.hasText(data.getIsCv())){
			lisAiItemCheckReference.setIsCv(data.getIsCv());
		}
		if(StringUtils.hasText(data.getLimitReferenceH())){
			lisAiItemCheckReference.setLimitReferenceH(data.getLimitReferenceH());
		}
		if(StringUtils.hasText(data.getLimitReferenceL())){
			lisAiItemCheckReference.setLimitReferenceL(data.getLimitReferenceL());
		}
		if(StringUtils.hasText(data.getRangeIsOpen())){
			lisAiItemCheckReference.setRangeIsOpen(data.getRangeIsOpen());
		}
		if(StringUtils.hasText(data.getSampleName())){
			lisAiItemCheckReference.setSampleName(data.getSampleName());
		}
		if(StringUtils.hasText(data.getSex())){
			lisAiItemCheckReference.setSex(data.getSex());
		}
		if(StringUtils.hasText(data.getSitemIsOpen())){
			lisAiItemCheckReference.setSitemIsOpen(data.getSitemIsOpen());
		}
		if(StringUtils.hasText(data.getSpecialItem())){
			lisAiItemCheckReference.setSpecialItem(data.getSpecialItem());
		}
		lisAiItemCheckReferenceService.update(lisAiItemCheckReference);
		return "{success:true}";
	}
	/**
	 * 用于删除选中的判断规则数据
	 */
	@RequestMapping(value = "deleteCheckRefJudge.do", produces = "application/json;charset=utf8")
	@ResponseBody
	public String deleteCheckRefJudge(@RequestBody List<LisAiItemCheckReference> judgeIdList) {
		for (LisAiItemCheckReference data : judgeIdList) {
			lisAiItemCheckReferenceService.delete(lisAiItemCheckReferenceService.queryById(data.getId()));
		}
		return "{success:true}";
	}
	
}
